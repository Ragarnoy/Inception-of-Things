---
- name: Install K3D
  hosts: all
  connection: local
  vars:
    k3d_version: v5.4.6
    k3d_download_url: https://github.com/k3d-io/k3d/releases/download/v5.4.6/k3d-linux-amd64
    k3d_checksum: sha256:8075d40c74c97d2642f15f535cb48d6d6e82df143f528833a193d87caac6a176

    kubectl_version: v1.25.3
    # Obtain with
    # `wget -q -O - "https://dl.k8s.io/{{ kubectl_version }}/bin/linux/amd64/kubectl.sha256"`
    kubectl_checksum: sha256:f57e568495c377407485d3eadc27cda25310694ef4ffc480eeea81dea2b60624

    docker_keyring_path: /usr/share/keyrings/docker-archive-keyring.gpg

  tasks:
    - name: Config Docker APT repo
      block:
        - name: Install Docker APT-key
          ansible.builtin.get_url:
            url: https://download.docker.com/linux/ubuntu/gpg
            dest: "{{ docker_keyring_path }}.armored"
            mode: 0o644
            owner: root
            group: root
          become: true
          register: download_apt_key

        - name: Dearmor Docker APT-key
          ansible.builtin.command: gpg --batch --yes --dearmor -o {{ docker_keyring_path }} {{ docker_keyring_path }}.armored
          become: true
          when: download_apt_key.changed

        - name: Add Docker Apt repo
          ansible.builtin.apt_repository:
            repo: deb [signed-by={{ docker_keyring_path }}] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable
            state: present
            filename: docker
            update_cache: true
          become: true

    - name: Install kubectl
      ansible.builtin.get_url:
        url: https://dl.k8s.io/release/{{ kubectl_version }}/bin/linux/amd64/kubectl
        checksum: "{{ kubectl_checksum }}"
        dest: /usr/local/bin/kubectl
        owner: root
        group: root
        mode: 0o755
      become: true

    - name: Install requirement for K3D
      ansible.builtin.package:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
      become: true

    - name: Add vagrant to docker's group
      ansible.builtin.user:
        append: true
        groups:
          - docker
        user: vagrant
      become: true

    - name: Install K3D
      ansible.builtin.get_url:
        url: "{{ k3d_download_url }}"
        checksum: "{{ k3d_checksum }}"
        dest: /usr/local/bin/k3d
        mode: 0o755
        owner: root
        group: root
      become: true

  post_tasks:
    - name: Ensure docker service is started
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: true
      become: true

# FIXME: The latter playbook should be executed in a new context because
# When we install `docker` and add the group `docker` to the vagrant user
# We should logout to take into account the new group and don't have permissions denied.
- name: Create & Configure a K3d cluster
  hosts: all
  connection: local
  vars:
    cluster_name: ft-kube
    kubeconfig_file: /vagrant/kubectl.config.yml
  tasks:
    - name: Create the k3d cluster {{ cluster_name }}
      ansible.builtin.command: k3d cluster create --api-port {{ server_ip }}:5443 -p 8080:80@loadbalancer -p 8443:443@loadbalancer -p 8888:8888@loadbalancer ft-kube
      register: k3d_create_cluster
      changed_when: k3d_create_cluster.stdout.find("Cluster '{}' created successfully!".format(cluster_name)) != -1
      # We consider that the command have failed when the error is not that the cluster already exist.
      failed_when:
        - k3d_create_cluster.rc != 0
        - k3d_create_cluster.stderr.find("Failed to create cluster '{}' because a cluster with that name already exists".format(cluster_name)) == -1

    - name: Configure bash env
      ansible.builtin.lineinfile:
        line: "{{ item }}"
        dest: ~/.bashrc
        mode: 0o644
      loop:
        - source <(k3d completion bash)
        - source <(kubectl completion bash)

    - name: Retrieve Kubectl configuration
      ansible.builtin.shell:
        cmd: >
          k3d kubeconfig get {{ cluster_name }}
          | tee {{ kubeconfig_file }}
        creates: "{{ kubeconfig_file }}"

- name: Configure argo-cd
  hosts: all
  connection: local
  handlers:
    - name: Restart argocd port-forward system
      ansible.builtin.systemd:
        name: argocd-forward
        state: restarted
        scope: user
        daemon_reload: true

  tasks:
    - name: Install kubernetes pip package
      ansible.builtin.pip:
        name: kubernetes
        version: 25.3.0
        state: present
      become: true

    - name: Download argo-cd k8s config file
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/argoproj/argo-cd/v2.5.1/manifests/install.yaml
        dest: /vagrant/files/01-argocd-install.yml
        mode: 0o644
        checksum: sha256:ce1008310c4796a0e7c1a0d9f9918bd9b875b5273ed18deffc8a19ddf9879da0

    - name: Apply namespaces
      kubernetes.core.k8s:
        apply: true
        src: 00-namespaces.yml

    - name: Apply argo cd
      kubernetes.core.k8s:
        apply: true
        namespace: argocd
        src: "{{ item }}"
      loop:
        - 01-argocd-install.yml
        - 01-argocd-cm.yml
        - 03-wil42-argocd.yml

    - name: Copy system unit to port-forward argocd
      ansible.builtin.copy:
        src: argocd-forward.service
        dest: /etc/systemd/user/argocd-forward.service
        mode: 0o644
      become: true
      notify: Restart argocd port-forward system

  post_tasks:
    - name: Wait for argocd server Deployment to be ready
      kubernetes.core.k8s_info:
        kind: Deployment
        name: argocd-server
        wait_condition:
          type: "Available"
          status: true
        wait: true
        wait_timeout: 60
        wait_sleep: 5
        namespace: argocd

    - name: Wait for argocd server pod to be ready
      kubernetes.core.k8s_info:
        kind: Pod
        label_selectors:
          - app.kubernetes.io/name = argocd-server
        wait: true
        wait_timeout: 60
        wait_sleep: 5
        namespace: argocd

    - name: Start argocd port forward
      ansible.builtin.systemd:
        name: argocd-forward
        state: started
        scope: user
        enabled: true

- name: Install argocd CLI
  hosts: all
  connection: local
  vars:
    argocd_cli_version: 2.5.4
    argocd_cli_dl_link: https://github.com/argoproj/argo-cd/releases/download/v{{ argocd_cli_version }}/argocd-linux-amd64
    argocd_cli_checksum: sha256:22e907ee6f9c287eb00627febe378a0f38fef4daf39159c4cc75f719c55c5698
  tasks:
    - name: Download argocd CLI
      ansible.builtin.get_url:
        url: "{{ argocd_cli_dl_link }}"
        checksum: "{{ argocd_cli_checksum }}"
        dest: /usr/local/bin/argocd
        mode: 0o555
      become: true

    - name: Add auto-complete
      ansible.builtin.lineinfile:
        line: source <(argocd completion bash)
        dest: ~/.bashrc
        mode: 0o644

    - name: Get argocd admin password
      kubernetes.core.k8s_info:
        namespace: argocd
        kind: Secret
        name: argocd-initial-admin-secret
      register: argocd_admin_passwd
      until: argocd_admin_passwd.resources | length > 0
      retries: 10
      delay: 5

    - name: Debug argocd admin resources
      ansible.builtin.debug:
        var: argocd_admin_passwd.resources | map(attribute='data.password') | map('b64decode') | list

    - name: Login with argocd
      ansible.builtin.command: >-
        argocd login {{ server_ip }}:9443
          --insecure
          --username admin
          --password "{{ argocd_admin_passwd.resources[0].data.password | b64decode }}"
      changed_when: true
